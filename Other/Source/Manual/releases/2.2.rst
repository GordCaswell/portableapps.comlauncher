.. index:: Release notes; 2.2

.. _releases-2.2:

===============================================================
PortableApps.com Launcher 2.2 release notes - UNDER DEVELOPMENT
===============================================================

Hot on the heels of 2.1, 2.2 is being developed with `more new features`_,
`some changes`_ and further improved documentation. It's never been easier to
make a high quality portable app.

.. _`more new features`: `New features`_
.. _`some changes`: `Changes`_

New features
============

New hook for custom code
------------------------

Three new hooks have been added which allows custom code to execute immediately
after the completion of the execution of the app, before all the standard
segments' ``Post`` hooks are executed (which does things like moving files
back, saving registry data and cleaning up some other things): ``PostExec``,
``PostExecPrimary`` and ``PostExecSecondary``. If you don't *know* that you
need this, you probably don't. See :ref:`Segments: Hooks <segments-hooks>` for
a little bit more information.

Run additional commands before or after the main program
--------------------------------------------------------

:ini-key:`[Launch]:RunBeforeN` and :ini-key:`[Launch]:RunAfterN` have been
added, providing a way to execute commands just before and just after the main
program's execution. These are useful for apps which need to (or can) do some
special setup or cleanup of their own to improve portability. Refer to the
linked documentation for further information.

:ini-key:`[LanguageFile]:TrimLeft`
----------------------------------

:ini-key:`[LanguageFile]:TrimLeft` has been added, the counterpart of
:ini-key:`[LanguageFile]:TrimRight` for trimming the start of a read string.

Save the language easily
------------------------

The new options :ini-key:`[LanguageFile]:SaveAs` and
:ini-key:`[Language]:SaveLanguage` can be used instead of
:ini-section:`[FileWriteN]` for the most common cases in order to save the
custom language when using :ini-section:`[LanguageFile]` or working only with
environment variables (e.g. ``LANG``).

New environment variable ``%PAL:AppID%``
----------------------------------------

A new environment variable, :env:`PAL:AppID`, is available for use in
:ref:`ref-launcher.ini`. Its counterpart for :ref:`custom code <custom-code>` is
``$AppID``.

New environment variable ``%PAL:Bits%``
---------------------------------------

A new environment variable, :env:`PAL:Bits`, is available for use in
:ref:`ref-launcher.ini`. Its value defaults to ``32`` when running on a 32-bit
machine or ``64`` when running on a 64-bit machine. The values which will be
taken can be configured in :ini-key:`[Launch]:BitsVariable32` and
:ini-key:`[Launch]:BitsVariable64`.

For :ref:`custom code <custom-code>`, there is ``$Bits``, which is ``64`` or
``32``. It is not affected by :ini-key:`[Launch]:BitsVariable32` or
:ini-key:`[Launch]:BitsVariable64`.

Persist variables between launches
----------------------------------

A new section, :ini-section:`[LastRunEnvironment]`, has been introduced. It
allows you to save arbitrary content, thus you can refer to it in the next
launch. This is useful when you need to e.g. know the value of
:env:`%PAL:LastDrive% <PAL:LastDrive>` from the previous run.

Changes
=======

Directory variables
-------------------

Now you can define environment variables as
:ref:`directory variables <ref-envsub-directory>` by appending a ``~`` (tilde)
to the key name. This way, you will get the same additional variables as the
built-in ones.

Currently, :ini-section:`[Environment]` and :ini-section:`[LastRunEnvironment]`
support this feature. Refer to their documentation for details.

Environment variable parsing on :ini-key:`[Launch]:ProgramExecutable`
---------------------------------------------------------------------

:ini-key:`[Launch]:ProgramExecutable` and
:ini-key:`[Launch]:ProgramExecutableWhenParameters` now have environment
variables parsed. This allows the use of :env:`%PAL:Bits% <PAL:Bits>` instead of
the -64 variants, :ini-key:`[Launch]:ProgramExecutable64` and
:ini-key:`[Launch]:ProgramExecutableWhenParameters64`.

Mutex-based starting/stopping checks
------------------------------------

The starting/stopping checks introduced in 2.1 were switched from using a
RuntimeData INI file to using mutexes. This change allows system-wide blocking
of apps in those phases, where the current one is installation-wide, i.e. it
will not work if you run the same app from different directories.

Renamed language environment variables
--------------------------------------

The language environment variables were renamed in order to fix a conflict with
the PortableApps.com Platform. The following tables lists their new names:

============================= =================
Old name                      New name
============================= =================
PortableApps.comLanguageCode  PAL:LanguageCode
PortableApps.comLocaleCode2   PAL:LanguageCode2
PortableApps.comLocaleCode3   PAL:LanguageCode3
PortableApps.comLocaleGlibc   PAL:LocaleGlibc
PortableApps.comLocaleWinName PAL:LocaleNSIS
PortableApps.comLocaleName    PAL:LocaleName
PortableApps.comLocaleID      PAL:LocaleID
============================= =================

The PortableApps.com Launcher Generator will automatically change your code to
use the new environment variables.
